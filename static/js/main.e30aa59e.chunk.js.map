{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","Clear","sortField","setSortField","sortOrder","setSortOrder","visibleGoods","newGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAWKA,E,6FAAAA,K,+BAAAA,E,wBAAAA,E,UAAAA,M,KAME,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA0BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAoBH,EAAUI,OAAhE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCH,oBAAoB,GAAtD,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EA3BR,SACEA,EADF,EAGEF,GACC,IAFCF,EAEF,EAFEA,UAGIK,EAAQ,YAAOD,GAerB,OAbIJ,GACFK,EAASC,MAAK,SAACC,EAAOC,GACpB,OAAQR,GACN,KAAKL,EAAUc,SACb,OAAOF,EAAMG,cAAcF,GAC7B,KAAKb,EAAUgB,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKPV,EAAuBG,EAASQ,UAApBR,EAOCS,CACnBlB,EACA,CAAEI,aACFE,GAGF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaN,EAAUc,WACtCQ,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcL,EAAUc,WAJxC,iCAUA,wBACEO,QAAS,kBAAMf,EAAaN,EAAUgB,SACtCM,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYlB,IAAcL,EAAUgB,SAJxC,4BAUA,wBACEK,QAAS,kBAAMb,GAAcD,IAC7Be,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAahB,IAJjB,sBAUEF,GAAaE,IACb,wBACEc,QAAS,WACPf,EAAaN,EAAUI,OACvBI,GAAa,IAEfc,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGX,EAAae,KAAI,SAACC,GAAD,OAChB,cAAC,WAAD,UACE,oBAAI,UAAQ,OAAZ,SAAoBA,KADPA,YC5GzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e30aa59e.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\ninterface ForState {\n  sortField: string,\n}\n\ntype SortOrder = false | true;\n\nenum SortField {\n  Alphabet = 'Sort alphabetically',\n  Length = 'Sort by length',\n  Clear = '',\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  visibleGoods: string[],\n  { sortField }: ForState,\n  sortOrder: SortOrder,\n) {\n  const newGoods = [...visibleGoods];\n\n  if (sortField) {\n    newGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return good1.localeCompare(good2);\n        case SortField.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return !sortOrder ? newGoods : newGoods.reverse();\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.Clear);\n  const [sortOrder, setSortOrder] = useState<SortOrder>(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField },\n    sortOrder,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortField.Alphabet)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortField.Alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortField.Length)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortField.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setSortOrder(!sortOrder)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !sortOrder,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortOrder) && (\n          <button\n            onClick={() => {\n              setSortField(SortField.Clear);\n              setSortOrder(false);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <Fragment key={good}>\n            <li data-cy=\"Good\">{good}</li>\n          </Fragment>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}